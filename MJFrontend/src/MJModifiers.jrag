aspect MJModifiers {

    // Define what kind of modifiers are allowed in method patterns.
    eq MethodPattern.getModifiers().mayBePublic() = true;
    eq MethodPattern.getModifiers().mayBePrivate() = true;
    eq MethodPattern.getModifiers().mayBeProtected() = true;
    eq MethodPattern.getModifiers().mayBeStatic() = true;
    eq MethodPattern.getModifiers().mayBeFinal() = true;
    eq MethodPattern.getModifiers().mayBeAbstract() = true;
    eq MethodPattern.getModifiers().mayBeSynchronized() = true;
    eq MethodPattern.getModifiers().mayBeNative() = true;
    eq MethodPattern.getModifiers().mayBeStrictfp() = true;

    syn lazy Collection<StaticForMethodDecl> TypeDecl.unimplementedTypeVariableMethods() = Collections.EMPTY_LIST;
    eq ClassDecl.unimplementedTypeVariableMethods() { 
	Collection<StaticForMethodDecl> c = new ArrayList();

	// TODO: 
	// Are we assuming if you extend a type variable as the superclass,
	// that type variable can only be instantiated with non-abstract types?
	// otherwise, you either 
	// - have to override every abstract method to make sure all 
	//   abstract methods are implemented.
	// - or declare yourself abstract.

	for ( Iterator ifIt = interfacesIterator(); ifIt.hasNext(); ) {
	    TypeDecl iface = (TypeDecl) ifIt.next();
	    if ( !iface.isTypeVariable()) continue;
	    /*
	    Collection<StaticForMethodDecl> possibleImpls = new HashSet<StaticForMethodDecl>();
	    for (Iterator<StaticForMethodDecl> refIt = reflectiveMethods().iterator(); refIt.hasNext(); ) {
		StaticForMethodDecl md = refIt.next();
		if ( md.canImplement(iface)) possibleImpls.add(md);
		}
	    */

	    Collection<StaticForMethodDecl> possibleImpls = canImplementTypeVariableMethods((TypeVariable) iface);
	    Collection<StaticForMethodDecl> unimpl = ((TypeVariable) iface).unimplementedBy(possibleImpls);
	    
	    c.addAll(unimpl);
	}
	return c;
    }

    // Returns all StaticForMethodDecl's that can possibly implement
    // a type variable, tv.
    syn lazy Collection<StaticForMethodDecl> TypeDecl.canImplementTypeVariableMethods(TypeVariable tv) {
	Collection<StaticForMethodDecl> methods = new HashSet<StaticForMethodDecl>();
	for ( StaticForMethodDecl md : reflectiveMethods())
	    if ( md.canImplement(tv)) methods.add(md);

	return methods;
    }
    eq ClassDecl.canImplementTypeVariableMethods(TypeVariable tv) {
	Collection<StaticForMethodDecl> methods = super.canImplementTypeVariableMethods(tv);
	if ( hasSuperclass())
	    methods.addAll(superclass().canImplementTypeVariableMethods(tv));
	return methods;
    }

    public boolean StaticForMethodDecl.canImplement(TypeDecl iface) {
	// The only reflectively declared methods that can possibly
	// implement interface methods are those that:
	// 1. have iface, or its subtype, as the reflective base type.
	// 2. iterate over methods of base type (as oppose to fields)
	// 3. use name variable.
	// 4. match on argument types using A* (A* could be bound)
	// 5. match on exceptions using E*
	// 6. modifiers must be public, non-static, non-final
	// 7. declared methods copy signature of pattern exactly
	Pattern pp = getIteratorDecl().getPattern();
	if ( !pp.isMethodPattern() ) return false;

	MethodPattern mp = (MethodPattern) pp;
	if ( reflectiveBaseType().subtype(iface) // 1.
	     && mp.getBaseSet().iterateMethods() // 2.
	     && mp.isNameVariable(mp.getID()) // 3.
	     && mp.getNumParameter() == 1 && mp.getParameter(0).type().isVectorTypeVariable() // 4.
	     && mp.getNumException() == 1 && mp.getException(0).type().isVectorTypeVariable() // 5.
	     && mp.getModifiers().possiblyPublic() && !mp.getModifiers().isStatic() && !mp.getModifiers().isFinal() // 6.
	     && mp.sameSignature(this) // 7.
	     ) return true;
	return false;
    }
    
    // Determine whether all methods in this type variable is implemented
    // by the collection of StaticForMethodDecl's in c.
    public Collection<StaticForMethodDecl> TypeVariable.unimplementedBy(Collection<StaticForMethodDecl> c) {
	Collection<StaticForMethodDecl> ifaceMethods = this.allMethods();
	boolean changed = false;
	do {
	    changed = false;
	    for(Iterator<StaticForMethodDecl> cIt=c.iterator(); cIt.hasNext();) {
		// For each StaticForMethodDecl in c, we try to determine which
		// or part of which of this's methods is implemented.
		// 
		// Prerequisite: all methods in both c and ifaceMethods have
		// the exact same signatures as their primary patterns.
		changed = removeImplemented(ifaceMethods, cIt.next());
	    }
	} while ( changed );
	return ifaceMethods;
    }

    /**
     * Modify ifaceMethods by removing what's been implemented by m
     * Pre: both ifaceMethods and m are static for method's with the exact
     * same signatures as their primary patterns.
     **/
    public boolean TypeVariable.removeImplemented(Collection<StaticForMethodDecl> ifaceMethods, StaticForMethodDecl m) {
	IteratorDecl mid = m.getIteratorDecl();
	boolean changed = false;

	for(Iterator<StaticForMethodDecl> ifaceIt = ifaceMethods.iterator(); ifaceIt.hasNext(); ) {
	    IteratorDecl imid = ifaceIt.next().getIteratorDecl();
	    
	    HashMap uniMap = new HashMap();
	    // mid.Pattern must subsume imid.Pattern.
	    if (!mid.getPattern().subsumes(imid.getPattern(), uniMap))
		continue;
	    
	    changed |= resolveNestedPatterns(imid, mid, uniMap);

	    // at this point, if there's no nested pattern left in imid,
	    // then im is completely implemented.
	    //if ( imid.getNumNestedPattern() == 0 ) {
	    if ( imid.nestedPatternsSatisfied()) {
		ifaceIt.remove();
	    }
	}	    
	return changed;
    }

    public boolean IteratorDecl.nestedPatternsSatisfied() {
	for ( int i=0; i<getNumNestedPattern(); i++) {
	    if ( !getNestedPattern(i).satisfiedBy(Collections.EMPTY_MAP))
		return false;
	}
	return true;
    }

    public boolean TypeVariable.resolveNestedPatterns(IteratorDecl imid,
						      IteratorDecl mid, 
						      Map uniMap) {
	// try cancel/narrow the nested patern
	// - If mid's nested pattern implies imid's nested pattern,
	//   the resulting nested pattern is just a true pattern.
	// - If imid's nested pattern implies mid's nested pattern,
	//   compute the difference.
	boolean changed  = false;
	for ( int i=0; i<mid.getNumNestedPattern(); i++) {
	    for ( int j=0; j<imid.getNumNestedPattern(); j++) {
		if (mid.getNestedPattern(j).implies(imid.getNestedPattern(i), uniMap)) {
		    imid.getNestedPatternList().removeChild(i);
		    changed = true;
		    j--;
		} else if (imid.getNestedPattern(i).implies(mid.getNestedPattern(j), uniMap)) {
		    imid.setNestedPattern(imid.getNestedPattern(i).difference(mid.getNestedPattern(j), uniMap), i);
		    changed = true;
		}
	    }
	}
	return changed;
    }

    public boolean Pattern.sameSignature(MethodDecl md) { return false; }
    public boolean MethodPattern.sameSignature(MethodDecl md) {
	// return type.
	if ( getTypeAccess().type() != md.type()) return false;

	// name.
	
	// arguments.
	if ( getNumParameter() != md.getNumParameter()) return false;
	for ( int i=0; i<getNumParameter(); i++) {
	    if ( getParameter(i).type() != md.getParameter(i).type())
		return false;
	}

	// exceptions.
	if ( getNumException() != md.getNumException()) return false;
	for ( int i=0; i<getNumException(); i++) {
	    if ( getException(i).type() != md.getException(i).type())
		return false;
	}

	return true;
    }
    refine Modifiers public void TypeDecl.checkModifiers() {
	Modifiers.TypeDecl.checkModifiers();
	Collection<StaticForMethodDecl> c = unimplementedTypeVariableMethods();
	if ( !isAbstract() && !c.isEmpty()) {
	    StringBuffer s = new StringBuffer();
	    s.append(name() + " is not declared abstract but does not " +
		     "implement the following methods in its type variable " +
		     "supertype(s): \n");
	    for (Iterator<StaticForMethodDecl> iter = c.iterator(); iter.hasNext(); ) {
		StaticForMethodDecl m = iter.next();
		s.append("  " + m.infoSignature() + " in " +
			 m.hostType().typeName() + "\n");
	    }
	    
	    error(s.toString());
	}
    }

    inh boolean Modifiers.possiblyPublic();
    eq EveryMethodDecl.getModifiers().possiblyPublic() = 
	getModifiers().numNegativeModifier("public") == 0;
    eq TypeDecl.getModifiers().possiblyPublic() = getModifiers().isPublic();
    eq FieldDeclaration.getModifiers().possiblyPublic() = getModifiers().isPublic();
    eq MethodDecl.getModifiers().possiblyPublic() = getModifiers().isPublic();
    eq ConstructorDecl.getModifiers().possiblyPublic() = getModifiers().isPublic();
    eq VariableDeclaration.getModifiers().possiblyPublic() = getModifiers().isPublic();
    eq ParameterDeclaration.getModifiers().possiblyPublic() = getModifiers().isPublic();
    eq Program.getChild().possiblyPublic() = false;
    eq TypeDecl.getBodyDecl().possiblyPublic() = false;

    inh boolean Modifiers.possiblyFinal();
    eq EveryMethodDecl.getModifiers().possiblyFinal() = 
	getModifiers().numNegativeModifier("final") == 0;
    eq TypeDecl.getModifiers().possiblyFinal() = getModifiers().isFinal();
    eq FieldDeclaration.getModifiers().possiblyFinal() = getModifiers().isFinal();
    eq MethodDecl.getModifiers().possiblyFinal() = getModifiers().isFinal();
    eq ConstructorDecl.getModifiers().possiblyFinal() = getModifiers().isFinal();
    eq VariableDeclaration.getModifiers().possiblyFinal() = getModifiers().isFinal();
    eq ParameterDeclaration.getModifiers().possiblyFinal() = getModifiers().isFinal();
    eq Program.getChild().possiblyFinal() = false;
    eq TypeDecl.getBodyDecl().possiblyFinal() = false;


    inh boolean Modifiers.possiblyProtected();
    eq EveryMethodDecl.getModifiers().possiblyProtected() = 
	getModifiers().numNegativeModifier("protected") == 0;
    eq TypeDecl.getModifiers().possiblyProtected() = getModifiers().isProtected();
    eq FieldDeclaration.getModifiers().possiblyProtected() = getModifiers().isProtected();
    eq MethodDecl.getModifiers().possiblyProtected() = getModifiers().isProtected();
    eq ConstructorDecl.getModifiers().possiblyProtected() = getModifiers().isProtected();
    eq VariableDeclaration.getModifiers().possiblyProtected() = getModifiers().isProtected();
    eq ParameterDeclaration.getModifiers().possiblyProtected() = getModifiers().isProtected();
    eq Program.getChild().possiblyProtected() = false;
    eq TypeDecl.getBodyDecl().possiblyProtected() = false;
    
    inh boolean Modifiers.possiblyPrivate();
    eq EveryMethodDecl.getModifiers().possiblyPrivate() = 
	getModifiers().numNegativeModifier("private") == 0;
    eq TypeDecl.getModifiers().possiblyPrivate() = getModifiers().possiblyPrivate();
    eq FieldDeclaration.getModifiers().possiblyPrivate() = getModifiers().possiblyPrivate();
    eq MethodDecl.getModifiers().possiblyPrivate() = getModifiers().possiblyPrivate();
    eq ConstructorDecl.getModifiers().possiblyPrivate() = getModifiers().possiblyPrivate();
    eq VariableDeclaration.getModifiers().possiblyPrivate() = getModifiers().possiblyPrivate();
    eq ParameterDeclaration.getModifiers().possiblyPrivate() = getModifiers().possiblyPrivate();
    eq Program.getChild().possiblyPrivate() = false;
    eq TypeDecl.getBodyDecl().possiblyPrivate() = false;

    inh boolean Modifiers.possiblyStatic();
    eq EveryMethodDecl.getModifiers().possiblyStatic() = true;
    eq TypeDecl.getModifiers().possiblyStatic() = getModifiers().isStatic();
    eq FieldDeclaration.getModifiers().possiblyStatic() = getModifiers().isStatic();
    eq MethodDecl.getModifiers().possiblyStatic() = getModifiers().isStatic();
    eq ConstructorDecl.getModifiers().possiblyStatic() = getModifiers().isStatic();
    eq VariableDeclaration.getModifiers().possiblyStatic() = getModifiers().isStatic();
    eq ParameterDeclaration.getModifiers().possiblyStatic() = getModifiers().isStatic();
    eq Program.getChild().possiblyStatic() = false;
    eq TypeDecl.getBodyDecl().possiblyStatic() = false;

    eq MethodPattern.getModifiers().possiblyPublic() = 
	getModifiers().isPublic() || 
	( !getModifiers().isPublic() && 
	  getModifiers().numModifier("private") == 0 &&
	  getModifiers().numModifier("protected") == 0 &&
	  getModifiers().numNegativeModifier("public") == 0 );
    eq FieldPattern.getModifiers().possiblyPublic() = 
	getModifiers().isPublic() || 
	( !getModifiers().isPublic() && 
	  getModifiers().numModifier("private") == 0 &&
	  getModifiers().numModifier("protected") == 0 &&
	  getModifiers().numNegativeModifier("public") == 0 );
    eq PatternMethodDecl.getModifiers().possiblyPublic() = 
	getModifiers().isPublic() || 
	( !getModifiers().isPublic() && 
	  getModifiers().numModifier("private") == 0 &&
	  getModifiers().numModifier("protected") == 0 &&
	  getModifiers().numNegativeModifier("public") == 0 );
    eq PatternFieldDeclaration.getModifiers().possiblyPublic() = 
	getModifiers().isPublic() || 
	( !getModifiers().isPublic() && 
	  getModifiers().numModifier("private") == 0 &&
	  getModifiers().numModifier("protected") == 0 &&
	  getModifiers().numNegativeModifier("public") == 0 );

    eq MethodPattern.getModifiers().possiblyProtected() = 
	getModifiers().isProtected() || 
	( !getModifiers().isProtected() && 
	  getModifiers().numModifier("private") == 0 &&
	  getModifiers().numModifier("public") == 0 &&
	  getModifiers().numNegativeModifier("protected") == 0 );
    eq FieldPattern.getModifiers().possiblyProtected() = 
	getModifiers().isProtected() || 
	( !getModifiers().isProtected() && 
	  getModifiers().numModifier("private") == 0 &&
	  getModifiers().numModifier("public") == 0 &&
	  getModifiers().numNegativeModifier("protected") == 0 );
    eq PatternMethodDecl.getModifiers().possiblyProtected() = 
	getModifiers().isProtected() || 
	( !getModifiers().isProtected() && 
	  getModifiers().numModifier("private") == 0 &&
	  getModifiers().numModifier("public") == 0 &&
	  getModifiers().numNegativeModifier("protected") == 0 );
    eq PatternFieldDeclaration.getModifiers().possiblyProtected() = 
	getModifiers().isProtected() || 
	( !getModifiers().isProtected() && 
	  getModifiers().numModifier("private") == 0 &&
	  getModifiers().numModifier("public") == 0 &&
	  getModifiers().numNegativeModifier("protected") == 0 );

    eq MethodPattern.getModifiers().possiblyPrivate() = 
	getModifiers().isPrivate() || 
	( !getModifiers().isPrivate() && 
	  getModifiers().numModifier("protected") == 0 &&
	  getModifiers().numModifier("public") == 0 &&
	  getModifiers().numNegativeModifier("private") == 0 );
    eq FieldPattern.getModifiers().possiblyPrivate() = 
	getModifiers().isPrivate() || 
	( !getModifiers().isPrivate() && 
	  getModifiers().numModifier("protected") == 0 &&
	  getModifiers().numModifier("public") == 0 &&
	  getModifiers().numNegativeModifier("private") == 0 );
    eq PatternMethodDecl.getModifiers().possiblyPrivate() = 
	getModifiers().isPrivate() || 
	( !getModifiers().isPrivate() && 
	  getModifiers().numModifier("protected") == 0 &&
	  getModifiers().numModifier("public") == 0 &&
	  getModifiers().numNegativeModifier("private") == 0 );
    eq PatternFieldDeclaration.getModifiers().possiblyPrivate() = 
	getModifiers().isPrivate() || 
	( !getModifiers().isPrivate() && 
	  getModifiers().numModifier("protected") == 0 &&
	  getModifiers().numModifier("public") == 0 &&
	  getModifiers().numNegativeModifier("private") == 0 );

    eq MethodPattern.getModifiers().possiblyFinal() =
	getModifiers().isFinal() || getModifiers().numNegativeModifier("final") == 0;
    eq FieldPattern.getModifiers().possiblyFinal() =
	getModifiers().isFinal() || getModifiers().numNegativeModifier("final") == 0;
    eq PatternMethodDecl.getModifiers().possiblyFinal() =
	getModifiers().isFinal() || getModifiers().numNegativeModifier("final") == 0;
    eq PatternFieldDeclaration.getModifiers().possiblyFinal() =
	getModifiers().isFinal() || getModifiers().numNegativeModifier("final") == 0;

    eq MethodPattern.getModifiers().possiblyStatic() = getModifiers().numNegativeModifier("static") == 0;
    eq FieldPattern.getModifiers().possiblyStatic() = getModifiers().numNegativeModifier("static") == 0;
    eq PatternMethodDecl.getModifiers().possiblyStatic() = getModifiers().numNegativeModifier("static") == 0;
    eq PatternFieldDeclaration.getModifiers().possiblyStatic() = getModifiers().numNegativeModifier("static") == 0;

    syn lazy boolean Modifier.isNegative() = false;
    eq NegativeModifier.isNegative() = true;

    syn lazy int Modifiers.numNegativeModifier(String name) {
	// search for negative modifiers.
	int n = 0;
	for ( int i=0; i<getNumModifier(); i++) {
	    if ( getModifier(i).isNegative() &&
		 getModifier(i).getID().equals(name))
		n++;
	}
	return n;
    }
    refine Modifiers eq Modifiers.numModifier(String name) {
	int n = 0;
	for(int i = 0; i < getNumModifier(); i++) {
	    if ( !getModifier(i).isNegative()) {
		String s = getModifier(i).getID();
		if(s.equals(name))
		    n++;
	    }
	}
	return n;
    }

    eq PatternMethodDecl.isPublic() = super.isPublic() && 
	!getModifiers().possiblyPrivate() && 
	!getModifiers().possiblyProtected();
    eq PatternMethodDecl.isProtected() = super.isProtected() &&
	!getModifiers().possiblyPrivate() && !getModifiers().possiblyPublic();
    eq PatternMethodDecl.isPrivate() = super.isPrivate() && 
	!getModifiers().possiblyPublic() && !getModifiers().possiblyProtected();

    eq EveryMethodDecl.isPublic() = super.isPublic() && 
	!getModifiers().possiblyPrivate() && 
	!getModifiers().possiblyProtected();
    eq EveryMethodDecl.isProtected() = super.isProtected() &&
	!getModifiers().possiblyPrivate() && !getModifiers().possiblyPublic();
    eq EveryMethodDecl.isPrivate() = super.isPrivate() && 
	!getModifiers().possiblyPublic() && !getModifiers().possiblyProtected();
	
    eq PatternFieldDeclaration.isPublic() = super.isPublic() && 
	!getModifiers().possiblyPrivate() && 
	!getModifiers().possiblyProtected();
    eq PatternFieldDeclaration.isProtected() = super.isProtected() && 
	!getModifiers().possiblyPrivate() && !getModifiers().possiblyPublic();
    eq PatternFieldDeclaration.isPrivate() = super.isPrivate() && 
	!getModifiers().possiblyPublic() && !getModifiers().possiblyProtected();

    
    // make sure that annotations indicated for FIELD can be used for
    // field pattern.
    eq FieldPattern.getModifiers().mayUseAnnotationTarget(String name) = 
	name.equals("FIELD");
    eq MethodPattern.getModifiers().mayUseAnnotationTarget(String name) =
	name.equals("METHOD");
    eq MethodPattern.getParameter().mayUseAnnotationTarget(String name) =
	name.equals("METHOD");

    syn lazy boolean MethodDecl.possiblyProtected() = getModifiers().possiblyProtected();
    eq StaticForMethodDeclSubstituted.possiblyProtected() =
	((StaticForMethodDecl) getOriginal()).possiblyProtected();

    syn lazy boolean MethodDecl.possiblyPublic() = getModifiers().possiblyPublic();
    eq StaticForMethodDeclSubstituted.possiblyPublic() =
	((StaticForMethodDecl) getOriginal()).possiblyPublic();

    syn lazy boolean MethodDecl.possiblyPrivate() = getModifiers().possiblyPrivate();
    eq StaticForMethodDeclSubstituted.possiblyPrivate() =
	((StaticForMethodDecl) getOriginal()).possiblyPrivate();

    syn lazy boolean MethodDecl.possiblyStatic() = getModifiers().possiblyStatic();
    eq StaticForMethodDeclSubstituted.possiblyStatic() =
	((StaticForMethodDecl) getOriginal()).possiblyStatic();

    syn lazy boolean MethodDecl.possiblyFinal() = getModifiers().possiblyFinal();
    eq StaticForMethodDeclSubstituted.possiblyFinal() = 
	((StaticForMethodDecl) getOriginal()).possiblyFinal();

}
