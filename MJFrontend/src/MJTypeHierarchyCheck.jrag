aspect MJTypeHierarchyCheck {
    // define attribute determining which type can be a superclass.
    /*
    syn boolean TypeDecl.canbeClass() = false;
    eq ClassDecl.canbeClass() = true;
    eq ConstrainedTypeVariable.canbeClass() = getConstraint().equals("class");

    // attribute for which type can be a superinterface.
    syn boolean TypeDecl.canbeInterface() = false;
    eq InterfaceDecl.canbeInterface() = true;
    eq ConstrainedTypeVariable.canbeInterface() = getConstraint().equals("interface");
    */

    eq ConstrainedTypeVariable.isInterfaceDecl() = getConstraint().equals("interface");
    eq ConstrainedTypeVariable.isClassDecl() = getConstraint().equals("class");

    refine TypeHierarchyCheck public void ClassDecl.nameCheck() {
	super.nameCheck();
	if(hasSuperClassAccess() && 
	   !getSuperClassAccess().type().isClassDecl())
	    error("class may not declare non-class type " + getSuperClassAccess().type().typeName() + " as superclass.");
	if(isObject() && hasSuperClassAccess())
	    error("class Object may not have superclass");
	if(isObject() && getNumImplements() != 0)
	    error("class Object may not implement interfaces");

	// 8.1.3
	if(isCircular()) {
	    // to be more precise, we look for any circularly defined
	    // body decls.
	    int cnt = 0;
	    for ( int i=0; i<getNumBodyDecl(); i++) {
		if ( getBodyDecl(i).circularlyDefined ) {
		    cnt++;
		    error("circular reflective declaration dependency in " + 
			  typeName() + ", for member declaration on line " + 
			  getLine(getBodyDecl(i).getStart()));
		}
	    }
	    if ( cnt == 0 )
		error("circular inheritance dependency in " + typeName()); 
	}
      
	// 8.1.4
	HashSet set = new HashSet();
	for(int i = 0; i < getNumImplements(); i++) {
	    TypeDecl decl = getImplements(i).type();
	    if(!decl.isInterfaceDecl() && !decl.isUnknown())
		error("type " + fullName() + " tries to implement non interface type " + decl.fullName());
	    if(set.contains(decl))
		error("type " + decl.fullName() + " mentionened multiple times in implements clause");
	    set.add(decl);
	}

	// When a type variable is used as a superclass or an interface,
	// the only way to make sure that its methods do not conflict with
	// the methods of another superclass/interface is to make sure
	// that 
	// - if the superclass is a type variable, the only interfaces
	//   being implemented are the also the bounds of that type variable.
	// - if one of the interfaces is a type variable, the only other 
	//   interfaces must be bounds of that type variable, and there may
	//   not be a superclass.
	/*
	if ( hasSuperClassAccess() && superclass().isTypeVariable()) {
	    for ( int i=0; i<getNumImplements(); i++) {
		if ( !superclass().subtype(getImplements(i).type()))
		    error("Cannot implement an interface that is not " +
			  "implemented by the type variable super class " +
			  superclass().name());
	    }
	}
	for ( int i=0; i<getNumImplements(); i++) {
	    if ( getImplements(i).type().isTypeVariable()) {
		for ( int j=0; j<getNumImplements(); j++) {
		    if (!getImplements(i).type().subtype(getImplements(j).type()))
			error("Cannot implement an interface that is not " +
			      "the super interface of the type variable " +
			      "interface " + getImplements(i).type().name());
		}
	    }
	}
	*/

	checkInterfaceImplementation();
    }

    public boolean ClassDecl.locallyImplements(MethodDecl m) {
	// check thet m is either defined by a statically defined method,
	// or subsumed by a reflectively defined method.
	if(!localMethodsSignature(m.signature()).isEmpty())
	    return true;

	Collection refMethods = reflectiveMethods();
	for ( Iterator refIt = refMethods.iterator();refIt.hasNext(); ) {
	    StaticForMethodDecl refM = (StaticForMethodDecl) refIt.next();
	    
	    // expandable static for methods are already included
	    // in the method signature maps.
	    if ( refM.expandable()) continue;
	    
	    // check whether this method subsumes the interface method.
	    HashMap uniMap = new HashMap();
	    if ( m.canUnifySignature(refM, uniMap,
				     refM.getIteratorDecl().patternTypeVariables(),
				     refM.getIteratorDecl().patternNameVariables()) &&
		 m.type().unifiesWith(refM.type(), uniMap, refM.getIteratorDecl().patternTypeVariables())) {
		// found.
		return true;
	    }
	}

	return false;
    }

    public void ClassDecl.checkInterfaceImplementation() {
	// interfacesMethodsIterator returns statically defined interface
	// methods.
	for(Iterator iter = interfacesMethodsIterator(); iter.hasNext(); ) {
	    MethodDecl m = (MethodDecl)iter.next();

	    if ( locallyImplements(m)) continue;

	    for(Iterator i2 = superclass().methodsSignature(m.signature()).iterator(); i2.hasNext(); ) {
		MethodDecl n = (MethodDecl)i2.next();
		if(n.accessibleFrom(this)) {
		    interfaceMethodCompatibleWithInherited(m, n);
		}
	    }
	    for (Iterator i2 = superclass().reflectivelyDeclaredMethods(m).iterator(); i2.hasNext(); ) {
		StaticForMethodDecl md = (StaticForMethodDecl)i2.next();
		// TODO: CHECK
		if ( md.accessibleFrom(this)) {
		    interfaceMethodCompatibleWithInherited(m, md);
		}
	    }

	    for(Iterator i2 = interfacesMethodsSignature(m.signature()).iterator(); i2.hasNext(); ) {
		MethodDecl n = (MethodDecl)i2.next();
		if(!n.mayOverrideReturn(m) && !m.mayOverrideReturn(n))
		    error("the return type of method " + m.signature() + 
			  " in " + m.hostType().typeName() + 
			  " does not match the return type of method " + 
			  n.signature() + " in " + 
			  n.hostType().typeName() + 
			  " and may thus not be overriden");
	    }
	}
    }

    refine Generics public void TypeDecl.typeCheck () {
	Generics.TypeDecl.typeCheck();

	// check reflective methods.
	Collection refMethods = reflectiveMethods();
	for ( Iterator refIt = refMethods.iterator();refIt.hasNext(); ) {
	    StaticForMethodDecl m = (StaticForMethodDecl) refIt.next();
	    ASTNode target = m.hostType() == this ? (ASTNode)m : (ASTNode)this;

	    for(Iterator i2 = m.ancestorMethods(this).iterator(); i2.hasNext(); ) {
		MethodDecl decl = (MethodDecl)i2.next();
		if(m.overrides(decl)) {
		    // 8.4.6.1
		    if(!m.isStatic() && decl.isStatic())
			target.error("an instance method may not override a static method");
		    
		    // regardless of overriding
		    // 8.4.6.3
		    if(!m.mayOverrideReturn(decl))
			target.error("the return type of method " + m.signature() + " in " + m.hostType().typeName() + " does not match the return type of method " + decl.signature() + " in " + decl.hostType().typeName() + " and may thus not be overriden");
		    
		    // regardless of overriding
		    // 8.4.4
		    for(int i = 0; i < m.getNumException(); i++) {
			Access e = m.getException(i);
			boolean found = false;
			for(int j = 0; !found && j < decl.getNumException(); j++) {
			    if(e.type().instanceOf(decl.getException(j).type()))
				found = true;
			}
			if(!found && e.type().isUncheckedException())
			    target.error(m.signature() + " in " + m.hostType().typeName() + " may not throw more checked exceptions than overridden method " +
					 decl.signature() + " in " + decl.hostType().typeName());
		    }
		    // 8.4.6.3
		    if(decl.isPublic() && !m.isPublic())
			target.error("overriding access modifier error");
		    // 8.4.6.3
		    if(decl.isProtected() && !(m.isPublic() || m.isProtected()))
			target.error("overriding access modifier error");
		    // 8.4.6.3
		    if((!decl.isPrivate() && !decl.isProtected() && !decl.isPublic()) && m.isPrivate())
			target.error("overriding access modifier error");
		    
		    // regardless of overriding
		    if(decl.possiblyFinal())
			target.error("method " + m.signature() + " in " + hostType().typeName() + " can not override final method " + decl.signature() + " in " + decl.hostType().typeName());
		}
		if(m.hides(decl)) {
		    // 8.4.6.2
		    if(m.isStatic() && !decl.isStatic())
			target.error("a static method may not hide an instance method");
		    // 8.4.6.3
		    if(!m.mayOverrideReturn(decl))
			target.error("can not hide a method with a different return type");
		    // 8.4.4
		    for(int i = 0; i < m.getNumException(); i++) {
			Access e = m.getException(i);
			boolean found = false;
			for(int j = 0; !found && j < decl.getNumException(); j++) {
			    if(e.type().instanceOf(decl.getException(j).type()))
				found = true;
			}
			if(!found)
			    target.error("may not throw more checked exceptions than hidden method");
		    }
		    // 8.4.6.3
		    if(decl.isPublic() && !m.isPublic())
			target.error("hiding access modifier error: public method " + decl.signature() + " in " + decl.hostType().typeName() + " is hidden by non public method " + m.signature() + " in " + m.hostType().typeName());
		    // 8.4.6.3
		    if(decl.isProtected() && !(m.isPublic() || m.isProtected()))
			target.error("hiding access modifier error: protected method " + decl.signature() + " in " + decl.hostType().typeName() + " is hidden by non (public|protected) method " + m.signature() + " in " + m.hostType().typeName());
		    // 8.4.6.3
		    if((!decl.isPrivate() && !decl.isProtected() && !decl.isPublic()) && m.isPrivate())
			target.error("hiding access modifier error: default method " + decl.signature() + " in " + decl.hostType().typeName() + " is hidden by private method " + m.signature() + " in " + m.hostType().typeName());
		    if(decl.possiblyFinal())
			target.error("method " + m.signature() + " in " + hostType().typeName() + " can not hide final method " + decl.signature() + " in " + decl.hostType().typeName());
		}
	    }
	}
    }

}
