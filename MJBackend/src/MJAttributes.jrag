aspect MJAttributes {
    
    public CodeAttribute.CodeAttribute(ConstantPool cp, String name) {
	super(cp, name);
    }

    class MJCodeAttribute extends CodeAttribute {
	public MJCodeAttribute(CodeGeneration codeGen, MethodDecl m) {
	    super(codeGen.constantPool(), "Code");
	    u2(codeGen.maxStackDepth());
	    u2(codeGen.maxLocals());
	    u4(codeGen.pos()); // code_length
	    append(codeGen.toArray());
	    u2(codeGen.exceptions.size());
	    for(Iterator iter = codeGen.exceptions.iterator(); iter.hasNext(); ) {
		CodeGeneration.ExceptionEntry e = (CodeGeneration.ExceptionEntry)iter.next();
		u2(e.start_pc);
		u2(e.end_pc);
		u2(e.handler_pc);
		u2(e.catch_type);
	    }
	    
	    if(m == null || !m.getModifiers().isSynthetic()) {
		u2(3); // Attribute count
		append(new LineNumberTableAttribute(codeGen));
		append(new LocalVariableTableAttribute(codeGen));

		// Add attribute for static for stmt entries.
		append(new StaticForStmtAttribute(codeGen));
	    }
	    else {
		u2(0); // Attribute count
	    }
	}
    }

    public java.util.List CodeGeneration.staticForStmtEntries = new ArrayList();

    public void CodeGeneration.addStaticForStmtBegin(IteratorDecl id)  {
	StaticForStmtEntry e = new StaticForStmtEntry();
	e.start_instr = pos();

	e.iterator_decl = id;
	staticForStmtEntries.add(e);
    }
    
    public void CodeGeneration.addStaticForStmtEnd() {
	StaticForStmtEntry e = 
	    (StaticForStmtEntry) staticForStmtEntries.get(staticForStmtEntries.size()-1);
	// add the end pos.
	e.end_instr = pos();
    }

    class StaticForStmtEntry {
	int start_instr;
	int end_instr;
	IteratorDecl iterator_decl; //int iterator_sig;
    }
    
    class StaticForStmtAttribute extends Attribute {
	public StaticForStmtAttribute(CodeGeneration gen) {
	    super(gen.constantPool(), "StaticForStmts");
	    u2(gen.staticForStmtEntries.size());
	    for ( Iterator iter = gen.staticForStmtEntries.iterator();
		  iter.hasNext(); ) {
		StaticForStmtEntry s = (StaticForStmtEntry) iter.next();
		u2(s.start_instr);
		u2(s.end_instr);

		append(new IteratorDeclAttribute(gen.constantPool(),
						 s.iterator_decl.signature(),
						 s.iterator_decl.constrainedTypeVariables()));

		//		u2(gen.constantPool().addUtf8(s.iterator_decl.signature()));
	    }
	}
    }

    public Collection IteratorDecl.constrainedTypeVariables() {
	Collection consTypes = new ArrayList();
	for ( int i=0; i<getNumPatternTypeParameter(); i++) 
	    if ( getPatternTypeParameter(i).isConstrainedTypeVariable() ||
		 getPatternTypeParameter(i) instanceof AllMatchingTypeVariable)
		consTypes.add(getPatternTypeParameter(i));
	return consTypes;
    }
    eq StaticForMethodDecl.attributes() {
	Collection c = super.attributes();
	
	// add attribute about the iterator decl.
	c.add(new IteratorDeclAttribute(hostType().constantPool(), 
					getIteratorDecl().signature(),
					getIteratorDecl().constrainedTypeVariables()));
	return c;
    }
    eq StaticForConstructorDecl.attributes() {
	Collection c = super.attributes();
	// add attribute about the iterator decl.
	c.add(new IteratorDeclAttribute(hostType().constantPool(), 
					getIteratorDecl().signature(),
					getIteratorDecl().constrainedTypeVariables()));
	return c;
    }
    eq StaticForFieldDeclaration.attributes() {
	Collection c = super.attributes();
	c.add(new IteratorDeclAttribute(hostType().constantPool(),
					getIteratorDecl().signature(),
					getIteratorDecl().constrainedTypeVariables()));
	
	return c;
    }

    class IteratorDeclAttribute extends Attribute {
	public IteratorDeclAttribute(ConstantPool cp, String iteratorSig, 
				     Collection consTypes) {
	    super(cp, "IteratorDecl");
	    u2(cp.addUtf8(iteratorSig));

	    if ( consTypes.size() > 0 ) {
		// attribute count.
		u2(1);
		append(new TypeVariableConstraintsAttribute(cp, consTypes));
	    } else { u2(0); }
	}
    }
    
    class TypeVariableConstraintsAttribute extends Attribute {
	public TypeVariableConstraintsAttribute(ConstantPool cp, 
						Collection tvs) {
	    super(cp, "TypeVariableConstraints");
	    u2(tvs.size());
	    for ( Iterator tIt = tvs.iterator(); tIt.hasNext(); )
		((TypeDecl) tIt.next()).appendAsAttributeTo(this, cp);
	}
    }

    public void TypeDecl.appendAsAttributeTo(TypeVariableConstraintsAttribute attr, ConstantPool cp) {}

    public void ConstrainedTypeVariable.appendAsAttributeTo(TypeVariableConstraintsAttribute attr, ConstantPool cp) {
	// append classTypeSignature.
	// followed by "I" for interface, or "C" for class.
	attr.u2(cp.addUtf8(classTypeSignature() + 
			   (mustbeClass() ? "C" : "I")));
    }
    public void AllMatchingTypeVariable.appendAsAttributeTo(TypeVariableConstraintsAttribute attr, ConstantPool cp) {
	attr.u2(cp.addUtf8(classTypeSignature() + "ALL"));
    }

    eq GenericTypeDecl.attributes() {
	Collection c = super.attributes();

	// collect the type parameters with constraints.
	Collection tvs = new ArrayList();
	for ( int i=0; i<getNumTypeParameter(); i++)
	    if ( getTypeParameter(i).isConstrainedTypeVariable())
		tvs.add(getTypeParameter(i));

	if ( tvs.size() > 0 ) 
	    c.add(new TypeVariableConstraintsAttribute(constantPool(), tvs));

	return c;
    }

    syn String IteratorDecl.signature() {
	// <R;..>[m;..] (A)R;[m]T;methods; -(A)R;[m]T;methods;+(A)R[m]T;methods 
	StringBuffer buf = new StringBuffer();
	Collection consTypes = new ArrayList();
	buf.append("<");
	for ( int i=0; i<getNumPatternTypeParameter(); i++) {
	    buf.append(getPatternTypeParameter(i).formalTypeParameter());
	}
	buf.append(">");
	buf.append("[");
	for ( int i=0; i<getNumPatternNameParameter(); i++) {
	    buf.append(getPatternNameParameter(i).getID() + ";");
	}
	buf.append("]");
	buf.append(getPattern().signature());
	for ( int i=0; i<getNumNestedPattern(); i++) {
	    buf.append(getNestedPattern(i).signature());
	}

	return buf.toString();
    }
    syn String Pattern.signature() { 
	throw new Error("signature() unsupported by " + getClass().getName());
    }
    eq EmptyPrimaryPattern.signature() {
	return ";";
    }
    eq FieldPattern.signature() {
	// field pattern: type[name]	
	StringBuffer buf = new StringBuffer(getTypeAccess().type().classTypeSignature());
	// append field name.
	buf.append("[");
	buf.append(getID());
	buf.append("]");

	// append modifiers.
	buf.append("(");
	buf.append(getModifiers().signature());
	buf.append(")");

	// append base set signature.
	buf.append(getBaseSet().signature());
	return buf.toString();
    }
    eq MethodPattern.signature() {
	PatternMethodDecl md = patternMethodDecl();
	StringBuffer buf = new StringBuffer(md.methodTypeSignature());
	// append method name.
	buf.append("[");
	buf.append(getID());
	buf.append("]");

	// append modifiers.
	buf.append("(");
	buf.append(md.getModifiers().signature());
	buf.append(")");

	// append base set signature.
	buf.append(getBaseSet().signature());
	return buf.toString();
    }
    eq NestedMethodPattern.signature() {
	StringBuffer buf = new StringBuffer();
	if ( getIsErrorCondition()) buf.append("error");

	if ( getIsPositive()) buf.append("+");
	else buf.append("-");
	buf.append(super.signature());
	return buf.toString();
    }
    eq NestedFieldPattern.signature() {
	StringBuffer buf = new StringBuffer();
	if ( getIsErrorCondition()) buf.append("error");

	if ( getIsPositive()) buf.append("+");
	else buf.append("-");
	buf.append(super.signature());
	return buf.toString();
    }
    syn String TrueNestedPattern.signature() { return ""; }

    syn String BaseSet.signature() {
	StringBuffer buf = new StringBuffer(getTypeAccess().type().classTypeSignature());
	buf.append(getRefElmt().signature());
	return buf.toString();
    }

    syn String RefElmt.signature() {
	return getElmtName() + ";";
    }

    syn String Modifiers.signature() {
	StringBuffer buf = new StringBuffer();
	for ( int i=0; i<getNumModifier(); i++) 
	    buf.append(getModifier(i).signature());
	return buf.toString();
    }
    syn String Modifier.signature() = getID() + ";";
    eq NegativeModifier.signature() = "-" + super.signature();
    eq NoModifier.signature() = "NOMOD";
}
