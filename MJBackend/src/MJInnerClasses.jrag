aspect MJInnerClasses {

    public boolean TypeDecl.hasField(Identifier id) {
	if(!memberFields(id).isEmpty())
	    return true;
	for(int i = 0; i < getNumBodyDecl(); i++) {
	    if(getBodyDecl(i) instanceof FieldDeclaration) {
		FieldDeclaration decl = (FieldDeclaration)getBodyDecl(i);
		if ( id.isNameVariable() && 
		     decl instanceof StaticForFieldDeclaration &&
		     id.equals(decl.identifier()))
		    return true;
		else if ( !id.isNameVariable() && decl.name().equals(id.varname))
		    return true;
	    }
	}
	return false;
    }
    
    refine InnerClasses eq VarAccess.requiresAccessor() {
	Variable v = decl();
	if(!(v instanceof FieldDeclaration))
	    return false;
	FieldDeclaration f = (FieldDeclaration)v;
	if(f.isPrivate() && !hostType().hasField(v.identifier()))
	    return true;
	if(f.isProtected() && !f.hostPackage().equals(hostPackage()) && !hostType().hasField(v.identifier()))
	    return true;
	return false;
    }


    /*
    public boolean TypeDecl.hasField(Identifier id) {
	if(!fields(id).isEmpty())
	    return true;
	return false;
    }	
    */

    private Access StaticForFieldDeclaration.createAccess() {
	Access fieldAccess = new VarAccess(name());
	return isStatic() ? fieldAccess : new VarAccess("that").qualifiesAccess(fieldAccess);
    }

    public MethodDecl StaticForFieldDeclaration.createAccessorWrite(TypeDecl fieldQualifier) {
	MethodDecl m = (MethodDecl) fieldQualifier.getAccessor(this, "field_write");
	if ( m != null ) return m;

	int accessorIndex = fieldQualifier.accessorCounter++;
	Modifiers modifiers = new Modifiers(new List());
	modifiers.addModifier(new Modifier("static"));
	modifiers.addModifier(new Modifier("synthetic"));
	modifiers.addModifier(new Modifier("public"));
	
	List parameters = new List();
	if(!isStatic())
	    parameters.add(new ParameterDeclaration(fieldQualifier.createQualifiedAccess(), "that"));
	parameters.add(new ParameterDeclaration(type().createQualifiedAccess(), "value"));
	
	
	// copy this' iterator declaration
	IteratorDecl newId = getIteratorDecl().fullCopy();
	m = new StaticForMethodDecl(modifiers,
      type().createQualifiedAccess(),
      "set$" + name() + "$access$" + accessorIndex,
      parameters,
      new List(),
      new Opt(
        new Block(
          new List().add(
            new ExprStmt(
              new AssignSimpleExpr(
                createAccess(),
                new VarAccess("value")
              )
            )
          ).add(
            new ReturnStmt(
              new Opt(
                new VarAccess("value")
              )
            )
          )
        )
	      ),
					   newId, new List(), new List());
	m = fieldQualifier.addMemberMethod(m);
	fieldQualifier.addAccessor(this, "field_write", m);
	return m;
    }

    public MethodDecl StaticForFieldDeclarationSubstituted.createAccessorWrite(TypeDecl fieldQualifier) {
	// This field could be created by either 
	// 1. .p(Parameterization parTypeDecl) or
	// 2. .substitute(Map)
	// The later comes from unification. We find the original and create
	// the accessor for the version before unification
	// otherwise, it comes from parameterization. We are accessing
	// a field in another class. Must create a parameterized version
	// of the accessor.

	if ( parameterizedBy != null ) 
	    return super.createAccessorWrite(fieldQualifier);
	
	return ((StaticForFieldDeclaration)getOriginal()).createAccessorWrite(fieldQualifier);
    }

    refine InnerClasses public ASTNode TypeDecl.getAccessor(ASTNode source, String name) {
	return source.getAccessorIn(this, name);
    }

    public ASTNode TypeDecl.inAccessorMap(ArrayList key) { 
	if ( accessorMap == null || !accessorMap.containsKey(key))
	    return null;
	return (ASTNode) accessorMap.get(key);
    }
    public ASTNode ParTypeDecl.inAccessorMap(ArrayList key) {
	ASTNode n = genericDecl().inAccessorMap(key);
	if ( n != null ) {
	    // properly parameterize.
	    String name = (String) key.get(1);
	    if ( name.equals("constructor"))
		n = ((ConstructorDecl) n).p(this);
	    else 
		n = ((MethodDecl) n).p(this);
	}

	return n;
    }

    public ASTNode ASTNode.getAccessorIn(TypeDecl t, String name) { 
	ArrayList key = new ArrayList(2);
	key.add(this);
	key.add(name);
	return t.inAccessorMap(key);
    }

    public ASTNode StaticForFieldDeclarationSubstituted.getAccessorIn(TypeDecl t, String name ) {
	if ( parameterizedBy != null ) 
	    return super.getAccessorIn(t, name);

	MethodDecl m = (MethodDecl) ((StaticForFieldDeclaration) getOriginal()).getAccessorIn(t, name);
	
	// apply substitutions
	if ( m != null )
	    m = m.substitute(this.expansionSubstitutions);
	
	return m;
    }
}